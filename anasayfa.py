# -*- coding: utf-8 -*-
import random

# Form implementation generated from reading ui file 'anayÃ¼z.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
from PyQt5 import QtCore, QtGui, QtWidgets
from numpy.polynomial import Polynomial
import time


class MplCanvas(FigureCanvas):
    def __init__(self):
        fig = Figure()
        self.axes = fig.add_subplot(111)
        super(MplCanvas, self).__init__(fig)

class Ui_MainWindow(object):

    def __init__(self):
        self.xvalues=[]
        self.yvalues=[]
        self.is_generated = False

    def setupUi(self, MainWindow): #seting up ui, every,QLineEdit, GroupBox and label is defined here
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 599)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(10, 20, 781, 141))
        self.groupBox.setObjectName("groupBox")
        self.groupBox_3 = QtWidgets.QGroupBox(self.groupBox)
        self.groupBox_3.setGeometry(QtCore.QRect(10, 10, 361, 121))
        self.groupBox_3.setObjectName("groupBox_3")
        self.label = QtWidgets.QLabel(self.groupBox_3)
        self.label.setGeometry(QtCore.QRect(10, 20, 41, 16))
        self.label.setObjectName("label")
        self.lineXValues = QtWidgets.QLineEdit(self.groupBox_3)
        self.lineXValues.setGeometry(QtCore.QRect(60, 20, 113, 22))
        self.lineXValues.setObjectName("lineXValues")
        self.lineYValues = QtWidgets.QLineEdit(self.groupBox_3)
        self.lineYValues.setGeometry(QtCore.QRect(60, 50, 113, 22))
        self.lineYValues.setObjectName("lineYValues")
        self.label_2 = QtWidgets.QLabel(self.groupBox_3)
        self.label_2.setGeometry(QtCore.QRect(10, 50, 41, 16))
        self.label_2.setObjectName("label_2")
        self.lineDegree = QtWidgets.QLineEdit(self.groupBox_3)
        self.lineDegree.setGeometry(QtCore.QRect(60, 80, 113, 22))
        self.lineDegree.setObjectName("lineDegree")
        self.label_3 = QtWidgets.QLabel(self.groupBox_3)
        self.label_3.setGeometry(QtCore.QRect(10, 80, 41, 16))
        self.label_3.setObjectName("label_3")
        self.pushEqnGenerator = QtWidgets.QPushButton(self.groupBox_3,clicked = lambda: self.generate_eqn())
        self.pushEqnGenerator.setGeometry(QtCore.QRect(210, 20, 141, 28))
        self.pushEqnGenerator.setObjectName("pushEqnGenerator")
        self.pushEqnReset = QtWidgets.QPushButton(self.groupBox_3,clicked = lambda: self.reset_eqn())
        self.pushEqnReset.setGeometry(QtCore.QRect(210, 50, 141, 28))
        self.pushEqnReset.setObjectName("pushEqnReset")
        self.groupBox_4 = QtWidgets.QGroupBox(self.groupBox)
        self.groupBox_4.setGeometry(QtCore.QRect(410, 10, 361, 121))
        self.groupBox_4.setObjectName("groupBox_4")
        self.label_4 = QtWidgets.QLabel(self.groupBox_4)
        self.label_4.setGeometry(QtCore.QRect(10, 20, 41, 16))
        self.label_4.setObjectName("label_4")
        self.lineEquation = QtWidgets.QLineEdit(self.groupBox_4)
        self.lineEquation.setGeometry(QtCore.QRect(60, 20, 113, 22))
        self.lineEquation.setObjectName("lineEquation")
        self.lineX1 = QtWidgets.QLineEdit(self.groupBox_4)
        self.lineX1.setGeometry(QtCore.QRect(60, 50, 113, 22))
        self.lineX1.setObjectName("lineX1")
        self.label_5 = QtWidgets.QLabel(self.groupBox_4)
        self.label_5.setGeometry(QtCore.QRect(30, 50, 21, 16))
        self.label_5.setObjectName("label_5")
        self.lineX2 = QtWidgets.QLineEdit(self.groupBox_4)
        self.lineX2.setGeometry(QtCore.QRect(60, 80, 113, 22))
        self.lineX2.setObjectName("lineX2")
        self.label_6 = QtWidgets.QLabel(self.groupBox_4)
        self.label_6.setGeometry(QtCore.QRect(30, 80, 21, 16))
        self.label_6.setObjectName("label_6")
        self.pushBisection = QtWidgets.QPushButton(self.groupBox_4,clicked = lambda: self.bisection())
        self.pushBisection.setGeometry(QtCore.QRect(210, 20, 141, 28))
        self.pushBisection.setObjectName("pushBisection")
        self.pushBisectionReset = QtWidgets.QPushButton(self.groupBox_4,clicked = lambda: self.bisection_reset())
        self.pushBisectionReset.setGeometry(QtCore.QRect(210, 50, 141, 28))
        self.pushBisectionReset.setObjectName("pushBisectionReset")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(10, 210, 781, 331))
        self.groupBox_2.setObjectName("groupBox_2")
        # create a horizontal layout
        self.horizontalLayout_1 = QtWidgets.QHBoxLayout(self.groupBox_2)
        self.horizontalLayout_1.setObjectName("horizontalLayout_1")
        ##Canvas Here
        self.canvas = MplCanvas()
        ##end of canvas
        ##add canvas
        self.horizontalLayout_1.addWidget(self.canvas)
        # end of horizontal layout
        self.groupBox_5 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_5.setGeometry(QtCore.QRect(10, 160, 781, 51))
        self.groupBox_5.setObjectName("groupBox_5")
        self.labelProcess = QtWidgets.QLabel(self.groupBox_5)
        self.labelProcess.setGeometry(QtCore.QRect(10, 20, 761, 20))
        self.labelProcess.setObjectName("labelProcess")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Bisection Method"))
        self.groupBox.setTitle(_translate("MainWindow", "Main Menu"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Generator"))
        self.label.setText(_translate("MainWindow", "X Values:"))
        self.label_2.setText(_translate("MainWindow", "Y Values:"))
        self.label_3.setText(_translate("MainWindow", "Degree:"))
        self.pushEqnGenerator.setText(_translate("MainWindow", "Generate Equation"))
        self.pushEqnReset.setText(_translate("MainWindow", "Reset"))
        self.groupBox_4.setTitle(_translate("MainWindow", "Bisection"))
        self.label_4.setText(_translate("MainWindow", "Equation:"))
        self.label_5.setText(_translate("MainWindow", "X1:"))
        self.label_6.setText(_translate("MainWindow", "X2:"))
        self.pushBisection.setText(_translate("MainWindow", "Bisection"))
        self.pushBisectionReset.setText(_translate("MainWindow", "Reset"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Table Representation"))
        self.groupBox_5.setTitle(_translate("MainWindow", "Status"))
        self.labelProcess.setText(_translate("MainWindow", "Process:"))

    def f(self,x): #text file to equation
        return eval(self.lineEquation.text(),{'x': x})

    def __show_plot(self): #create plot
        if len(self.xvalues)!=0 and len(self.yvalues)!=0:
            self.canvas.axes.cla()  # Clear the canvas.
            self.canvas.axes.plot(self.xvalues, self.yvalues, 'r')
            # Trigger the canvas to update and redraw
            self.canvas.draw()

    def generate_eqn(self):
        self.is_generated=True
        requested_x_values = self.lineXValues.text()
        requested_y_values = self.lineYValues.text()
        requested_degree = int(self.lineDegree.text())

        x_val_temp = requested_x_values.split(',')
        y_val_temp = requested_y_values.split(',')
        print(x_val_temp)
        print(y_val_temp)


        for i in range(len(x_val_temp)):
            self.xvalues.append(int(x_val_temp[i]))
            self.yvalues.append(int(y_val_temp[i]))

        self.poly = Polynomial.fit(self.xvalues,self.yvalues,requested_degree)

        self.lineEquation.setText(self.poly.__str__())
        self.lineEquation.setEnabled(False)

        self.__show_plot()

    def reset_eqn(self):
        self.lineEquation.setText("")
        if(self.lineEquation.isEnabled()==False):
            self.lineEquation.setEnabled(True)
        self.lineXValues.setText("")
        self.lineYValues.setText("")
        self.lineDegree.setText("")

    def bisection(self):
        #show plot first
        if len(self.xvalues)==0:
            for i in range(5):
                self.xvalues.append(i)
                self.yvalues.append(self.f(self.xvalues[i]))

        self.__show_plot()

        # bisection part

        a = int(self.lineX1.text())
        b = int(self.lineX2.text())
        if self.is_generated==True:
            f_a = self.poly(a)
            f_b = self.poly(b)
        else:
            f_a = self.f(a)
            f_b = self.f(b)
        if f_a * f_b > 0: #different aproach for rule no:1
            self.labelProcess.setText("Progress: Bisection Fails")
        else:
            eps = 1E-10
            i = 0  # iteration counter

            while b - a > eps:
                i += 1
                m = (a + b) / 2.0
                if self.is_generated:
                    f_m = self.poly(m)
                else:
                    f_m = self.f(m)
                if f_a * f_m <= 0:
                    b = m  # root is in left  half of [a,b]
                elif f_b * f_m < 0:
                    a = m  # root is in right half of [a,b]
                    f_a = f_m
                else:
                    self.labelProcess.setText("Bisection Fails at "+str(i)+". process")
                    break
                self.canvas.axes.plot(self.xvalues,self.yvalues,'-',m,f_m,'.')
                self.canvas.draw()
                self.labelProcess.setText(f"Step: {i},f(a)={f_a} ,f(b)={f_b},b-a={b - a}")
                #time.sleep(4)

    def bisection_reset(self):
        self.labelProcess.setText("Process: ")
        self.lineEquation.setEnabled(True)
        self.lineEquation.setText("")
        self.lineX1.setText("")
        self.lineX2.setText("")
        self.canvas.axes.cla()

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
